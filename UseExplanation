import numpy as np
import matplotlib.pyplot as plt
import logging

logging.basicConfig(level=logging.INFO)

def load_params() -> dict:
    return {
        'avg_efficiency': 0.95,
        'std_efficiency': 0.05,
        'avg_consumption_rate': 8,
        'std_consumption_rate': 3,
        'failure_prob': {
            'propulsion': 0.0005,
            'controls': 0.0003,
            'avionics': 0.0002,
            'mechanical': 0.00015,
            'unidentified': 0.00005
        }
    }

def simulate_mission(initial_charge: float, params: dict, mission_time_steps: np.array) -> tuple:
    remaining_charge = initial_charge
    expected_charge_used = 0
    failure = False
    failure_type = None
    
    for t in mission_time_steps:
        efficiency = np.random.normal(params['avg_efficiency'], params['std_efficiency'])
        consumption_rate = np.random.normal(params['avg_consumption_rate'], params['std_consumption_rate'])
        
        expected_charge_used += consumption_rate
        remaining_charge = max(remaining_charge - consumption_rate / efficiency, 0)

        for failure_section, prob in params['failure_prob'].items():
            if np.random.rand() < prob:
                failure = True
                failure_type = failure_section
                break

        if failure:
            break
            
    percentage_used_vs_expected = 100 * (initial_charge - remaining_charge) / expected_charge_used
    return percentage_used_vs_expected, failure, failure_type

def monte_carlo_simulation(n: int, initial_charge: float, params: dict, mission_time_steps: np.array) -> tuple:
    results = []
    failures = 0
    failure_counts = {k: 0 for k in params['failure_prob'].keys()}

    for _ in range(n):
        percentage_used_vs_expected, failure, failure_type = simulate_mission(initial_charge, params, mission_time_steps)
        results.append(percentage_used_vs_expected)
        
        if failure:
            failures += 1
            failure_counts[failure_type] += 1
            
    return results, failures / n, failure_counts

def main():
    initial_charge = 100
    mission_time_steps = np.linspace(0, 100, 10)
    params = load_params()
    num_simulations = 100000
    
    logging.info("Starting Monte Carlo simulation for electric flight.")
    
    percentage_results, failure_rate, failure_counts = monte_carlo_simulation(num_simulations, initial_charge, params, mission_time_steps)
    
    mean_percentage = np.mean(percentage_results)
    std_percentage = np.std(percentage_results)
    
    logging.info(f"Mean Percentage Used vs Expected: {mean_percentage}%")
    logging.info(f"Standard Deviation of Percentage Used vs Expected: {std_percentage}%")
    logging.info(f"Failure Rate: {failure_rate * 100}%")
    logging.info(f"Failure counts by type: {failure_counts}")

    # Changed density to False and bins to 20 to increase the frequency range on the Y-axis
    plt.hist(percentage_results, bins=20, density=False, alpha=0.6, color='b')
    plt.title('Distribution of Percentage Used vs Expected')
    plt.xlabel('Percentage Used vs Expected (%)')
    plt.ylabel('Frequency')
    plt.show()

if __name__ == "__main__":
    main()
